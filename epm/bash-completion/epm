# epm command line completion
# Copyright 2007-2008 "Lennart Kolmodin" <kolmodin@gentoo.org>
#                     "Duncan Coutts"     <dcoutts@gentoo.org>
#

# List epm targets by type, pass:
#   - test-suite for test suites
#   - benchmark for benchmarks
#   - executable for executables
#   - executable|test-suite|benchmark for the three
_epm_list()
{
	cat *.epm |
	grep -Ei "^[[:space:]]*($1)[[:space:]]" |
	sed -e "s/.* \([^ ]*\).*/\1/"
}

# List possible targets depending on the command supplied as parameter.  The
# ideal option would be to implement this via --list-options on epm directly.
# This is a temporary workaround.
_epm_targets()
{
	# If command ($*) contains build, repl, test or bench completes with
	# targets of according type.
	[ -f *.epm ] || return 0
	local comp
	for comp in $*; do
		[ $comp == build ] && _epm_list "executable|test-suite|benchmark" && break
		[ $comp == repl  ] && _epm_list "executable|test-suite|benchmark" && break
		[ $comp == run   ] && _epm_list "executable"                      && break
		[ $comp == test  ] && _epm_list            "test-suite"           && break
		[ $comp == bench ] && _epm_list                       "benchmark" && break
	done
}

# List possible subcommands of a epm subcommand.
#
# In example "sandbox" is a epm subcommand that itself has subcommands. Since
# "epm --list-options" doesn't work in such cases we have to get the list
# using other means.
_epm_subcommands()
{
    local word
    for word in "$@"; do
        case "$word" in
          sandbox)
            # Get list of "epm sandbox" subcommands from its help message.
            #
            # Following command short-circuits if it reaches flags section.
            # This is to prevent any problems that might arise from unfortunate
            # word combinations in flag descriptions. Usage section is parsed
            # using simple regexp and "sandbox" subcommand is printed for each
            # successful substitution.
            "$1" help sandbox |
            sed -rn '/Flags/q;s/^.* epm sandbox  *([^ ]*).*/\1/;t p;b;: p;p'
            break  # Terminate for loop.
            ;;
        esac
    done
}

_epm()
{
    # get the word currently being completed
    local cur
    cur=${COMP_WORDS[$COMP_CWORD]}

    # create a command line to run
    local cmd
    # copy all words the user has entered
    cmd=( ${COMP_WORDS[@]} )

    # replace the current word with --list-options
    cmd[${COMP_CWORD}]="--list-options"

    # the resulting completions should be put into this array
    COMPREPLY=( $( compgen -W "$( ${cmd[@]} ) $( _epm_targets ${cmd[@]} ) $( _epm_subcommands ${COMP_WORDS[@]} )" -- $cur ) )
}

complete -F _epm -o default epm
